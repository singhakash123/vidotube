import jwt from "jsonwebtoken";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { asyncHandler } from "../utils/asyncHandler.js";

// This middleware decodes the JWT and finds the user from DB and attaches it to req.user
export const verifyAccessToken = asyncHandler(async (req, res, next) => {
  // 1Ô∏è‚É£ Get token from cookie or Authorization header
  const token =
    req.cookies?.accessToken ||
    req.headers.authorization?.replace("Bearer ", "");

  if (!token) {
    throw new ApiError(401, "Access Token is missing or expired");
  }

  // 2Ô∏è‚É£ Verify token
  const decoded = jwt.verify(token, process.env.ACCESSTOKEN_SECRETKEY);

  // 3Ô∏è‚É£ Attach user to req
 const user = await User.findById(decoded._id);
  if (!user) {
    throw new ApiError(401, "User not found with this token");
  }

  req.user = user;
  next(); // continue to controller
});


/*
‚ùå Mistakes:
error.name = "TokenExpiredError" ‚ùå
‚Üí This is an assignment, not a comparison. Use === instead.

replace("Bearer", "")
‚Üí You missed the space ‚Üí should be "Bearer " (with a space)
*/




/*
‚úÖ Code Breakdown ‚Äî verifyAccessToken

export const verifyAccessToken = asyncHandler(async (req, res, next) => {
üîπ verifyAccessToken is a middleware:
Used to protect routes (like GET /profile, POST /todos etc.)
Runs before the controller function.
Wrap with asyncHandler() to automatically catch and forward any async errors to global error handler


1Ô∏è‚É£ Get Token from Cookies or Authorization Header
const token =
  req.cookies?.accessToken ||
  req.headers.authorization?.replace("Bearer ", "");

üß† Why both?
Frontend can send token in HTTP-only cookie (req.cookies.accessToken)
Or via Authorization header (Bearer <token>)

This line covers both:
Method	Example
Cookie	accessToken=xyz123...
Authorization	Authorization: Bearer xyz123...

It first tries to get the token from cookie, then falls back to header.

2Ô∏è‚É£ Token Not Found?
if (!token) {
  throw new ApiError(401, "Access Token is missing or expired");
}
If token is missing (user not logged in or token expired) ‚Üí return 401 Unauthorized
ApiError is your custom error class ‚Äî this lets you use centralized error responses.

3Ô∏è‚É£ Verify Token
const decoded = jwt.verify(token, process.env.ACCESSTOKEN_SECRETKEY);

jwt.verify() checks:
Signature is valid (matches secret key)
Token has not expired (exp field)
If invalid or expired, throws error automatically ‚Äî caught by asyncHandler

üì¶ After verification
decoded = {
  _id: "6488adbcf...", // user ID embedded when signing token
  username: "akash",
  email: "akash@example.com",
  iat: ..., // issued at
  exp: ...  // expiry timestamp
}
4Ô∏è‚É£ Find User in DB
const user = await User.findById(decoded._id);
if (!user) {
  throw new ApiError(401, "User not found with this token");
}
Why this step?
Token may be valid, but user could be deleted/deactivated.
We check DB to confirm the user still exists.
If not ‚Üí throw 401.

5Ô∏è‚É£ Attach User to Request
req.user = user;
next(); // continue to controller
Now that user is verified, we attach the full user document to req.user.

So in any protected controller (like getMyProfile), we can simply do:

‚úÖ Final Flow Summary

Client ü°≤ /api/user/profile
         ‚¨áÔ∏è (middleware)
     verifyAccessToken
         ‚¨áÔ∏è
     - Get token from cookie/header
     - Verify JWT token
     - Get user from DB
     - Attach user to req.user
         ‚¨áÔ∏è
Controller (getMyProfile)

*/
